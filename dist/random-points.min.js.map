{"version":3,"file":"random-points.min.js","mappings":"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","sources":["webpack://geotools/webpack/universalModuleDefinition","webpack://geotools/./index.js","webpack://geotools/./lib/random-points.js","webpack://geotools/./lib/turf.js","webpack://geotools/./node_modules/@turf/area/dist/js/index.js","webpack://geotools/./node_modules/@turf/area/node_modules/@turf/helpers/dist/js/index.js","webpack://geotools/./node_modules/@turf/area/node_modules/@turf/meta/dist/js/index.js","webpack://geotools/./node_modules/@turf/bbox/dist/js/index.js","webpack://geotools/./node_modules/@turf/bbox/node_modules/@turf/helpers/dist/js/index.js","webpack://geotools/./node_modules/@turf/bbox/node_modules/@turf/meta/dist/js/index.js","webpack://geotools/./node_modules/@turf/helpers/dist/js/index.js","webpack://geotools/./node_modules/@turf/points-within-polygon/dist/js/index.js","webpack://geotools/./node_modules/@turf/points-within-polygon/node_modules/@turf/boolean-point-in-polygon/dist/js/index.js","webpack://geotools/./node_modules/@turf/points-within-polygon/node_modules/@turf/helpers/dist/js/index.js","webpack://geotools/./node_modules/@turf/points-within-polygon/node_modules/@turf/invariant/dist/js/index.js","webpack://geotools/./node_modules/@turf/points-within-polygon/node_modules/@turf/meta/dist/js/index.js","webpack://geotools/./node_modules/@turf/random/dist/js/index.js","webpack://geotools/./node_modules/@turf/random/node_modules/@turf/helpers/dist/js/index.js","webpack://geotools/./node_modules/@turf/unkink-polygon/dist/js/index.js","webpack://geotools/./node_modules/@turf/unkink-polygon/node_modules/@turf/boolean-point-in-polygon/dist/js/index.js","webpack://geotools/./node_modules/@turf/unkink-polygon/node_modules/@turf/helpers/dist/js/index.js","webpack://geotools/./node_modules/@turf/unkink-polygon/node_modules/@turf/invariant/dist/js/index.js","webpack://geotools/./node_modules/@turf/unkink-polygon/node_modules/@turf/meta/dist/js/index.js","webpack://geotools/./node_modules/quickselect/quickselect.js","webpack://geotools/./node_modules/rbush/index.js","webpack://geotools/webpack/bootstrap","webpack://geotools/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geotools\"] = factory();\n\telse\n\t\troot[\"geotools\"] = factory();\n})(self, () => {\nreturn ","const randomPoints = require('./lib/random-points');\n\nmodule.exports = {\n  random: randomPoints,\n};\n","const turf = require('./turf');\n\nconst DEFAULT_NUMBER = 10;\n\nconst randomPoints = (n, bbox) => {\n  const count = n || DEFAULT_NUMBER;\n  return turf.randomPoint(count, {\n    bbox,\n  });\n};\n\nconst randomPointsFromGeoJSON = (input, { features, unkink }) => {\n  let fc;\n  if (unkink) {\n    fc = turf.unkinkPolygon(features);\n  } else {\n    fc = features;\n  }\n\n  const ori = input || DEFAULT_NUMBER;\n  const randomFeatures = [];\n  const bbox = turf.bbox(fc);\n  let n = ori;\n  let flag = false;\n  let joker = 0;\n\n  while (!flag) {\n    const thePoints = turf.randomPoint(n, {\n      bbox,\n    });\n    joker += 1;\n    const ptsWithin = turf.pointsWithinPolygon(thePoints, fc);\n    for (let i = 0; i < ptsWithin.features.length; i += 1) {\n      randomFeatures.push(ptsWithin.features[i]);\n    }\n    if (randomFeatures.length < ori) {\n      n = ori - randomFeatures.length;\n    } else {\n      flag = true;\n    }\n    if (joker > ori * 10000) {\n      throw new Error(\n        'Your are not lucky. Ending without reaching expected number of Points with input polygon(s)'\n      );\n    }\n  }\n  return turf.featureCollection(randomFeatures);\n};\n\n/**\n * Creates random points and returns it as a FeatureCollecion\n * @param  {Number} number of points to generate\n * @param  {Object} options for random [bbox|input]\n * @return FeatureCollection generated random points\n */\nmodule.exports = (number, options) => {\n  let points;\n  let params = options;\n  if (typeof params === 'undefined') {\n    params = { unkink: true };\n  }\n  if (typeof params.unkink === 'undefined') {\n    params.unkink = true;\n  }\n\n  // console.debug('params', params);\n  if (typeof params.features !== 'undefined') {\n    points = randomPointsFromGeoJSON(number, params);\n  } else {\n    points = randomPoints(number, params.bbox);\n  }\n\n  return points;\n};\n","const unkinkPolygon = require('@turf/unkink-polygon');\nconst random = require('@turf/random');\nconst bbox = require('@turf/bbox');\nconst pointsWithinPolygon = require('@turf/points-within-polygon');\nconst helpers = require('@turf/helpers');\n\nmodule.exports = {\n  randomPoint: random.randomPoint,\n  unkinkPolygon,\n  bbox: bbox.default,\n  pointsWithinPolygon,\n  featureCollection: helpers.featureCollection,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n// Note: change RADIUS => earthRadius\nvar RADIUS = 6378137;\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson) {\n    return meta_1.geomReduce(geojson, function (value, geom) {\n        return value + calculateArea(geom);\n    }, 0);\n}\nexports.default = area;\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom) {\n    var total = 0;\n    var i;\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonArea(geom.coordinates);\n        case \"MultiPolygon\":\n            for (i = 0; i < geom.coordinates.length; i++) {\n                total += polygonArea(geom.coordinates[i]);\n            }\n            return total;\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n            return 0;\n    }\n    return 0;\n}\nfunction polygonArea(coords) {\n    var total = 0;\n    if (coords && coords.length > 0) {\n        total += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            total -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return total;\n}\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords) {\n    var p1;\n    var p2;\n    var p3;\n    var lowerIndex;\n    var middleIndex;\n    var upperIndex;\n    var i;\n    var total = 0;\n    var coordsLength = coords.length;\n    if (coordsLength > 2) {\n        for (i = 0; i < coordsLength; i++) {\n            if (i === coordsLength - 2) {\n                // i = N-2\n                lowerIndex = coordsLength - 2;\n                middleIndex = coordsLength - 1;\n                upperIndex = 0;\n            }\n            else if (i === coordsLength - 1) {\n                // i = N-1\n                lowerIndex = coordsLength - 1;\n                middleIndex = 0;\n                upperIndex = 1;\n            }\n            else {\n                // i = 0 to N-3\n                lowerIndex = i;\n                middleIndex = i + 1;\n                upperIndex = i + 2;\n            }\n            p1 = coords[lowerIndex];\n            p2 = coords[middleIndex];\n            p3 = coords[upperIndex];\n            total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n        }\n        total = (total * RADIUS * RADIUS) / 2;\n    }\n    return total;\n}\nfunction rad(num) {\n    return (num * Math.PI) / 180;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexports.default = bbox;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nvar pointInPolygon = require('@turf/boolean-point-in-polygon');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar pointInPolygon__default = /*#__PURE__*/_interopDefaultLegacy(pointInPolygon);\n\n/**\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\n *\n * @name pointsWithinPolygon\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\n * @example\n * var points = turf.points([\n *     [-46.6318, -23.5523],\n *     [-46.6246, -23.5325],\n *     [-46.6062, -23.5513],\n *     [-46.663, -23.554],\n *     [-46.643, -23.557]\n * ]);\n *\n * var searchWithin = turf.polygon([[\n *     [-46.653,-23.543],\n *     [-46.634,-23.5346],\n *     [-46.613,-23.543],\n *     [-46.614,-23.559],\n *     [-46.631,-23.567],\n *     [-46.653,-23.560],\n *     [-46.653,-23.543]\n * ]]);\n *\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n *\n * //addToMap\n * var addToMap = [points, searchWithin, ptsWithin]\n * turf.featureEach(ptsWithin, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction pointsWithinPolygon(points, polygons) {\n  var results = [];\n  meta.featureEach(points, function (point) {\n    var contained = false;\n    if (point.geometry.type === \"Point\") {\n      meta.geomEach(polygons, function (polygon) {\n        if (pointInPolygon__default['default'](point, polygon)) contained = true;\n      });\n      if (contained) {\n        results.push(point);\n      }\n    } else if (point.geometry.type === \"MultiPoint\") {\n      var pointsWithin = [];\n      meta.geomEach(polygons, function (polygon) {\n        meta.coordEach(point, function (pointCoord) {\n          if (pointInPolygon__default['default'](pointCoord, polygon)) {\n            contained = true;\n            pointsWithin.push(pointCoord);\n          }\n        });\n      });\n      if (contained) {\n        results.push(helpers.multiPoint(pointsWithin));\n      }\n    } else {\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\n    }\n  });\n  return helpers.featureCollection(results);\n}\n\nmodule.exports = pointsWithinPolygon;\nmodule.exports.default = pointsWithinPolygon;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = require(\"@turf/invariant\");\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = invariant_1.getCoord(point);\n    var geom = invariant_1.getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\nexports.default = booleanPointInPolygon;\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nexports.getCoord = getCoord;\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\nexports.getCoords = getCoords;\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        helpers_1.isNumber(coordinates[0]) &&\n        helpers_1.isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\nexports.containsNumber = containsNumber;\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\nexports.geojsonType = geojsonType;\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\nexports.featureOf = featureOf;\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\nexports.collectionOf = collectionOf;\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\nexports.getGeom = getGeom;\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\nexports.getType = getType;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * // => position\n */\nfunction randomPosition(bbox) {\n    if (Array.isArray(bbox)) {\n        return coordInBBox(bbox);\n    }\n    if (bbox && bbox.bbox) {\n        return coordInBBox(bbox.bbox);\n    }\n    return [lon(), lat()];\n}\nexports.randomPosition = randomPosition;\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * // => points\n */\nfunction randomPoint(count, options) {\n    if (options === void 0) { options = {}; }\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        features.push(helpers_1.point(randomPosition(options.bbox)));\n    }\n    return helpers_1.featureCollection(features);\n}\nexports.randomPoint = randomPoint;\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a\n * vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * // => polygons\n */\nfunction randomPolygon(count, options) {\n    if (options === void 0) { options = {}; }\n    // Default param\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    if (!helpers_1.isNumber(options.num_vertices) || options.num_vertices === undefined) {\n        options.num_vertices = 10;\n    }\n    if (!helpers_1.isNumber(options.max_radial_length) ||\n        options.max_radial_length === undefined) {\n        options.max_radial_length = 10;\n    }\n    var features = [];\n    var _loop_1 = function (i) {\n        var vertices = [];\n        var circleOffsets = __spreadArrays(Array(options.num_vertices + 1)).map(Math.random);\n        // Sum Offsets\n        circleOffsets.forEach(function (cur, index, arr) {\n            arr[index] = index > 0 ? cur + arr[index - 1] : cur;\n        });\n        // scaleOffsets\n        circleOffsets.forEach(function (cur) {\n            cur = (cur * 2 * Math.PI) / circleOffsets[circleOffsets.length - 1];\n            var radialScaler = Math.random();\n            vertices.push([\n                radialScaler * (options.max_radial_length || 10) * Math.sin(cur),\n                radialScaler * (options.max_radial_length || 10) * Math.cos(cur),\n            ]);\n        });\n        vertices[vertices.length - 1] = vertices[0]; // close the ring\n        // center the polygon around something\n        vertices = vertices.map(vertexToCoordinate(randomPosition(options.bbox)));\n        features.push(helpers_1.polygon([vertices]));\n    };\n    for (var i = 0; i < count; i++) {\n        _loop_1(i);\n    }\n    return helpers_1.featureCollection(features);\n}\nexports.randomPolygon = randomPolygon;\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a\n * vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a\n * line segment can turn from the previous segment.\n * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * // => lineStrings\n */\nfunction randomLineString(count, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!helpers_1.isObject(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var bbox = options.bbox;\n    var num_vertices = options.num_vertices;\n    var max_length = options.max_length;\n    var max_rotation = options.max_rotation;\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    // Default parameters\n    if (!helpers_1.isNumber(num_vertices) ||\n        num_vertices === undefined ||\n        num_vertices < 2) {\n        num_vertices = 10;\n    }\n    if (!helpers_1.isNumber(max_length) || max_length === undefined) {\n        max_length = 0.0001;\n    }\n    if (!helpers_1.isNumber(max_rotation) || max_rotation === undefined) {\n        max_rotation = Math.PI / 8;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        var startingPoint = randomPosition(bbox);\n        var vertices = [startingPoint];\n        for (var j = 0; j < num_vertices - 1; j++) {\n            var priorAngle = j === 0\n                ? Math.random() * 2 * Math.PI\n                : Math.tan((vertices[j][1] - vertices[j - 1][1]) /\n                    (vertices[j][0] - vertices[j - 1][0]));\n            var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n            var distance = Math.random() * max_length;\n            vertices.push([\n                vertices[j][0] + distance * Math.cos(angle),\n                vertices[j][1] + distance * Math.sin(angle),\n            ]);\n        }\n        features.push(helpers_1.lineString(vertices));\n    }\n    return helpers_1.featureCollection(features);\n}\nexports.randomLineString = randomLineString;\nfunction vertexToCoordinate(hub) {\n    return function (cur) {\n        return [cur[0] + hub[0], cur[1] + hub[1]];\n    };\n}\nfunction rnd() {\n    return Math.random() - 0.5;\n}\nfunction lon() {\n    return rnd() * 360;\n}\nfunction lat() {\n    return rnd() * 180;\n}\nfunction coordInBBox(bbox) {\n    return [\n        Math.random() * (bbox[2] - bbox[0]) + bbox[0],\n        Math.random() * (bbox[3] - bbox[1]) + bbox[1],\n    ];\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nvar meta = require('@turf/meta');\nvar helpers = require('@turf/helpers');\nvar rbush = require('rbush');\nvar area = require('@turf/area');\nvar booleanPointInPolygon = require('@turf/boolean-point-in-polygon');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar rbush__default = /*#__PURE__*/_interopDefaultLegacy(rbush);\nvar area__default = /*#__PURE__*/_interopDefaultLegacy(area);\nvar booleanPointInPolygon__default = /*#__PURE__*/_interopDefaultLegacy(booleanPointInPolygon);\n\n// Find self-intersections in geojson polygon (possibly with interior rings)\n\nfunction isects (feature, filterFn, useSpatialIndex) {\n  if (feature.geometry.type !== \"Polygon\")\n    throw new Error(\"The input feature must be a Polygon\");\n  if (useSpatialIndex === undefined) useSpatialIndex = 1;\n\n  var coord = feature.geometry.coordinates;\n\n  var output = [];\n  var seen = {};\n\n  if (useSpatialIndex) {\n    var allEdgesAsRbushTreeItems = [];\n    for (var ring0 = 0; ring0 < coord.length; ring0++) {\n      for (var edge0 = 0; edge0 < coord[ring0].length - 1; edge0++) {\n        allEdgesAsRbushTreeItems.push(rbushTreeItem(ring0, edge0));\n      }\n    }\n    var tree = rbush__default['default']();\n    tree.load(allEdgesAsRbushTreeItems);\n  }\n\n  for (var ringA = 0; ringA < coord.length; ringA++) {\n    for (var edgeA = 0; edgeA < coord[ringA].length - 1; edgeA++) {\n      if (useSpatialIndex) {\n        var bboxOverlaps = tree.search(rbushTreeItem(ringA, edgeA));\n        bboxOverlaps.forEach(function (bboxIsect) {\n          var ring1 = bboxIsect.ring;\n          var edge1 = bboxIsect.edge;\n          ifIsectAddToOutput(ringA, edgeA, ring1, edge1);\n        });\n      } else {\n        for (var ring1 = 0; ring1 < coord.length; ring1++) {\n          for (var edge1 = 0; edge1 < coord[ring1].length - 1; edge1++) {\n            // TODO: speedup possible if only interested in unique: start last two loops at ringA and edgeA+1\n            ifIsectAddToOutput(ringA, edgeA, ring1, edge1);\n          }\n        }\n      }\n    }\n  }\n\n  if (!filterFn)\n    output = {\n      type: \"Feature\",\n      geometry: { type: \"MultiPoint\", coordinates: output },\n    };\n  return output;\n\n  // Function to check if two edges intersect and add the intersection to the output\n  function ifIsectAddToOutput(ring0, edge0, ring1, edge1) {\n    var start0 = coord[ring0][edge0];\n    var end0 = coord[ring0][edge0 + 1];\n    var start1 = coord[ring1][edge1];\n    var end1 = coord[ring1][edge1 + 1];\n\n    var isect = intersect(start0, end0, start1, end1);\n\n    if (isect === null) return; // discard parallels and coincidence\n    var frac0;\n    var frac1;\n    if (end0[0] !== start0[0]) {\n      frac0 = (isect[0] - start0[0]) / (end0[0] - start0[0]);\n    } else {\n      frac0 = (isect[1] - start0[1]) / (end0[1] - start0[1]);\n    }\n    if (end1[0] !== start1[0]) {\n      frac1 = (isect[0] - start1[0]) / (end1[0] - start1[0]);\n    } else {\n      frac1 = (isect[1] - start1[1]) / (end1[1] - start1[1]);\n    }\n    if (frac0 >= 1 || frac0 <= 0 || frac1 >= 1 || frac1 <= 0) return; // require segment intersection\n\n    var key = isect;\n    var unique = !seen[key];\n    if (unique) {\n      seen[key] = true;\n    }\n\n    if (filterFn) {\n      output.push(\n        filterFn(\n          isect,\n          ring0,\n          edge0,\n          start0,\n          end0,\n          frac0,\n          ring1,\n          edge1,\n          start1,\n          end1,\n          frac1,\n          unique\n        )\n      );\n    } else {\n      output.push(isect);\n    }\n  }\n\n  // Function to return a rbush tree item given an ring and edge number\n  function rbushTreeItem(ring, edge) {\n    var start = coord[ring][edge];\n    var end = coord[ring][edge + 1];\n    var minX;\n    var maxX;\n    var minY;\n    var maxY;\n    if (start[0] < end[0]) {\n      minX = start[0];\n      maxX = end[0];\n    } else {\n      minX = end[0];\n      maxX = start[0];\n    }\n    if (start[1] < end[1]) {\n      minY = start[1];\n      maxY = end[1];\n    } else {\n      minY = end[1];\n      maxY = start[1];\n    }\n    return {\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      ring: ring,\n      edge: edge,\n    };\n  }\n}\n\n// Function to compute where two lines (not segments) intersect. From https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\nfunction intersect(start0, end0, start1, end1) {\n  if (\n    equalArrays(start0, start1) ||\n    equalArrays(start0, end1) ||\n    equalArrays(end0, start1) ||\n    equalArrays(end1, start1)\n  )\n    return null;\n  var x0 = start0[0],\n    y0 = start0[1],\n    x1 = end0[0],\n    y1 = end0[1],\n    x2 = start1[0],\n    y2 = start1[1],\n    x3 = end1[0],\n    y3 = end1[1];\n  var denom = (x0 - x1) * (y2 - y3) - (y0 - y1) * (x2 - x3);\n  if (denom === 0) return null;\n  var x4 =\n    ((x0 * y1 - y0 * x1) * (x2 - x3) - (x0 - x1) * (x2 * y3 - y2 * x3)) / denom;\n  var y4 =\n    ((x0 * y1 - y0 * x1) * (y2 - y3) - (y0 - y1) * (x2 * y3 - y2 * x3)) / denom;\n  return [x4, y4];\n}\n\n// Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript\nfunction equalArrays(array1, array2) {\n  // if the other array is a falsy value, return\n  if (!array1 || !array2) return false;\n\n  // compare lengths - can save a lot of time\n  if (array1.length !== array2.length) return false;\n\n  for (var i = 0, l = array1.length; i < l; i++) {\n    // Check if we have nested arrays\n    if (array1[i] instanceof Array && array2[i] instanceof Array) {\n      // recurse into the nested arrays\n      if (!equalArrays(array1[i], array2[i])) return false;\n    } else if (array1[i] !== array2[i]) {\n      // Warning - two different object instances will never be equal: {x:20} !== {x:20}\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Takes a complex (i.e. self-intersecting) geojson polygon, and breaks it down into its composite simple, non-self-intersecting one-ring polygons.\n *\n * @module simplepolygon\n * @param {Feature} feature Input polygon. This polygon may be unconform the {@link https://en.wikipedia.org/wiki/Simple_Features|Simple Features standard} in the sense that it's inner and outer rings may cross-intersect or self-intersect, that the outer ring must not contain the optional inner rings and that the winding number must not be positive for the outer and negative for the inner rings.\n * @return {FeatureCollection} Feature collection containing the simple, non-self-intersecting one-ring polygon features that the complex polygon is composed of. These simple polygons have properties such as their parent polygon, winding number and net winding number.\n *\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[[0,0],[2,0],[0,2],[2,2],[0,0]]]\n *   }\n * };\n *\n * var result = simplepolygon(poly);\n *\n * // =result\n * // which will be a featureCollection of two polygons, one with coordinates [[[0,0],[2,0],[1,1],[0,0]]], parent -1, winding 1 and net winding 1, and one with coordinates [[[1,1],[0,2],[2,2],[1,1]]], parent -1, winding -1 and net winding -1\n */\nfunction simplepolygon (feature) {\n  // Check input\n  if (feature.type != \"Feature\")\n    throw new Error(\"The input must a geojson object of type Feature\");\n  if (feature.geometry === undefined || feature.geometry == null)\n    throw new Error(\n      \"The input must a geojson object with a non-empty geometry\"\n    );\n  if (feature.geometry.type != \"Polygon\")\n    throw new Error(\"The input must be a geojson Polygon\");\n\n  // Process input\n  var numRings = feature.geometry.coordinates.length;\n  var vertices = [];\n  for (var i = 0; i < numRings; i++) {\n    var ring = feature.geometry.coordinates[i];\n    if (!equalArrays$1(ring[0], ring[ring.length - 1])) {\n      ring.push(ring[0]); // Close input ring if it is not\n    }\n    vertices.push.apply(vertices, ring.slice(0, ring.length - 1));\n  }\n  if (!isUnique(vertices))\n    throw new Error(\n      \"The input polygon may not have duplicate vertices (except for the first and last vertex of each ring)\"\n    );\n  var numvertices = vertices.length; // number of input ring vertices, with the last closing vertices not counted\n\n  // Compute self-intersections\n  var selfIsectsData = isects(\n    feature,\n    function filterFn(\n      isect,\n      ring0,\n      edge0,\n      start0,\n      end0,\n      frac0,\n      ring1,\n      edge1,\n      start1,\n      end1,\n      frac1,\n      unique\n    ) {\n      return [\n        isect,\n        ring0,\n        edge0,\n        start0,\n        end0,\n        frac0,\n        ring1,\n        edge1,\n        start1,\n        end1,\n        frac1,\n        unique,\n      ];\n    }\n  );\n  var numSelfIsect = selfIsectsData.length;\n\n  // If no self-intersections are found, the input rings are the output rings. Hence, we must only compute their winding numbers, net winding numbers and (since ohers rings could lie outside the first ring) parents.\n  if (numSelfIsect == 0) {\n    var outputFeatureArray = [];\n    for (var i = 0; i < numRings; i++) {\n      outputFeatureArray.push(\n        helpers.polygon([feature.geometry.coordinates[i]], {\n          parent: -1,\n          winding: windingOfRing(feature.geometry.coordinates[i]),\n        })\n      );\n    }\n    var output = helpers.featureCollection(outputFeatureArray);\n    determineParents();\n    setNetWinding();\n\n    return output;\n  }\n\n  // If self-intersections are found, we will compute the output rings with the help of two intermediate variables\n  // First, we build the pseudo vertex list and intersection list\n  // The Pseudo vertex list is an array with for each ring an array with for each edge an array containing the pseudo-vertices (as made by their constructor) that have this ring and edge as ringAndEdgeIn, sorted for each edge by their fractional distance on this edge. It's length hence equals numRings.\n  var pseudoVtxListByRingAndEdge = [];\n  // The intersection list is an array containing intersections (as made by their constructor). First all numvertices ring-vertex-intersections, then all self-intersections (intra- and inter-ring). The order of the latter is not important but is permanent once given.\n  var isectList = [];\n  // Adding ring-pseudo-vertices to pseudoVtxListByRingAndEdge and ring-vertex-intersections to isectList\n  for (var i = 0; i < numRings; i++) {\n    pseudoVtxListByRingAndEdge.push([]);\n    for (var j = 0; j < feature.geometry.coordinates[i].length - 1; j++) {\n      // Each edge will feature one ring-pseudo-vertex in its array, on the last position. i.e. edge j features the ring-pseudo-vertex of the ring vertex j+1, which has ringAndEdgeIn = [i,j], on the last position.\n      pseudoVtxListByRingAndEdge[i].push([\n        new PseudoVtx(\n          feature.geometry.coordinates[i][\n            modulo(j + 1, feature.geometry.coordinates[i].length - 1)\n          ],\n          1,\n          [i, j],\n          [i, modulo(j + 1, feature.geometry.coordinates[i].length - 1)],\n          undefined\n        ),\n      ]);\n      // The first numvertices elements in isectList correspond to the ring-vertex-intersections\n      isectList.push(\n        new Isect(\n          feature.geometry.coordinates[i][j],\n          [i, modulo(j - 1, feature.geometry.coordinates[i].length - 1)],\n          [i, j],\n          undefined,\n          undefined,\n          false,\n          true\n        )\n      );\n    }\n  }\n  // Adding intersection-pseudo-vertices to pseudoVtxListByRingAndEdge and self-intersections to isectList\n  for (var i = 0; i < numSelfIsect; i++) {\n    // Adding intersection-pseudo-vertices made using selfIsectsData to pseudoVtxListByRingAndEdge's array corresponding to the incomming ring and edge\n    pseudoVtxListByRingAndEdge[selfIsectsData[i][1]][selfIsectsData[i][2]].push(\n      new PseudoVtx(\n        selfIsectsData[i][0],\n        selfIsectsData[i][5],\n        [selfIsectsData[i][1], selfIsectsData[i][2]],\n        [selfIsectsData[i][6], selfIsectsData[i][7]],\n        undefined\n      )\n    );\n    // selfIsectsData contains double mentions of each intersection, but we only want to add them once to isectList\n    if (selfIsectsData[i][11])\n      isectList.push(\n        new Isect(\n          selfIsectsData[i][0],\n          [selfIsectsData[i][1], selfIsectsData[i][2]],\n          [selfIsectsData[i][6], selfIsectsData[i][7]],\n          undefined,\n          undefined,\n          true,\n          true\n        )\n      );\n  }\n  var numIsect = isectList.length;\n  // Sort edge arrays of pseudoVtxListByRingAndEdge by the fractional distance 'param'\n  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {\n    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {\n      pseudoVtxListByRingAndEdge[i][j].sort(function (a, b) {\n        return a.param < b.param ? -1 : 1;\n      });\n    }\n  }\n\n  // Make a spatial index of intersections, in preperation for the following two steps\n  var allIsectsAsIsectRbushTreeItem = [];\n  for (var i = 0; i < numIsect; i++) {\n    allIsectsAsIsectRbushTreeItem.push({\n      minX: isectList[i].coord[0],\n      minY: isectList[i].coord[1],\n      maxX: isectList[i].coord[0],\n      maxY: isectList[i].coord[1],\n      index: i,\n    }); // could pass isect: isectList[i], but not necessary\n  }\n  var isectRbushTree = rbush__default['default']();\n  isectRbushTree.load(allIsectsAsIsectRbushTreeItem);\n\n  // Now we will teach each intersection in isectList which is the next intersection along both it's [ring, edge]'s, in two steps.\n  // First, we find the next intersection for each pseudo-vertex in pseudoVtxListByRingAndEdge:\n  // For each pseudovertex in pseudoVtxListByRingAndEdge (3 loops) look at the next pseudovertex on that edge and find the corresponding intersection by comparing coordinates\n  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {\n    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {\n      for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++) {\n        var coordToFind;\n        if (k == pseudoVtxListByRingAndEdge[i][j].length - 1) {\n          // If it's the last pseudoVertex on that edge, then the next pseudoVertex is the first one on the next edge of that ring.\n          coordToFind =\n            pseudoVtxListByRingAndEdge[i][\n              modulo(j + 1, feature.geometry.coordinates[i].length - 1)\n            ][0].coord;\n        } else {\n          coordToFind = pseudoVtxListByRingAndEdge[i][j][k + 1].coord;\n        }\n        var IsectRbushTreeItemFound = isectRbushTree.search({\n          minX: coordToFind[0],\n          minY: coordToFind[1],\n          maxX: coordToFind[0],\n          maxY: coordToFind[1],\n        })[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex\n        pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn =\n          IsectRbushTreeItemFound.index;\n      }\n    }\n  }\n\n  // Second, we port this knowledge of the next intersection over to the intersections in isectList, by finding the intersection corresponding to each pseudo-vertex and copying the pseudo-vertex' knownledge of the next-intersection over to the intersection\n  for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {\n    for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {\n      for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++) {\n        var coordToFind = pseudoVtxListByRingAndEdge[i][j][k].coord;\n        var IsectRbushTreeItemFound = isectRbushTree.search({\n          minX: coordToFind[0],\n          minY: coordToFind[1],\n          maxX: coordToFind[0],\n          maxY: coordToFind[1],\n        })[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex\n        var l = IsectRbushTreeItemFound.index;\n        if (l < numvertices) {\n          // Special treatment at ring-vertices: we correct the misnaming that happened in the previous block, since ringAndEdgeOut = ringAndEdge2 for ring vertices.\n          isectList[l].nxtIsectAlongRingAndEdge2 =\n            pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;\n        } else {\n          // Port the knowledge of the next intersection from the pseudo-vertices to the intersections, depending on how the edges are labeled in the pseudo-vertex and intersection.\n          if (\n            equalArrays$1(\n              isectList[l].ringAndEdge1,\n              pseudoVtxListByRingAndEdge[i][j][k].ringAndEdgeIn\n            )\n          ) {\n            isectList[l].nxtIsectAlongRingAndEdge1 =\n              pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;\n          } else {\n            isectList[l].nxtIsectAlongRingAndEdge2 =\n              pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;\n          }\n        }\n      }\n    }\n  }\n  // This explains why, eventhough when we will walk away from an intersection, we will walk way from the corresponding pseudo-vertex along edgeOut, pseudo-vertices have the property 'nxtIsectAlongEdgeIn' in stead of some propery 'nxtPseudoVtxAlongEdgeOut'. This is because this property (which is easy to find out) is used in the above for nxtIsectAlongRingAndEdge1 and nxtIsectAlongRingAndEdge2!\n\n  // Before we start walking over the intersections to build the output rings, we prepare a queue that stores information on intersections we still have to deal with, and put at least one intersection in it.\n  // This queue will contain information on intersections where we can start walking from once the current walk is finished, and its parent output ring (the smallest output ring it lies within, -1 if no parent or parent unknown yet) and its winding number (which we can already determine).\n  var queue = [];\n  // For each output ring, add the ring-vertex-intersection with the smalles x-value (i.e. the left-most) as a start intersection. By choosing such an extremal intersections, we are sure to start at an intersection that is a convex vertex of its output ring. By adding them all to the queue, we are sure that no rings will be forgotten. If due to ring-intersections such an intersection will be encountered while walking, it will be removed from the queue.\n  var i = 0;\n  for (var j = 0; j < numRings; j++) {\n    var leftIsect = i;\n    for (var k = 0; k < feature.geometry.coordinates[j].length - 1; k++) {\n      if (isectList[i].coord[0] < isectList[leftIsect].coord[0]) {\n        leftIsect = i;\n      }\n      i++;\n    }\n    // Compute winding at this left-most ring-vertex-intersection. We thus this by using our knowledge that this extremal vertex must be a convex vertex.\n    // We first find the intersection before and after it, and then use them to determine the winding number of the corresponding output ring, since we know that an extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it would not be is because the winding number we use to compute it is wrong\n    var isectAfterLeftIsect = isectList[leftIsect].nxtIsectAlongRingAndEdge2;\n    for (var k = 0; k < isectList.length; k++) {\n      if (\n        isectList[k].nxtIsectAlongRingAndEdge1 == leftIsect ||\n        isectList[k].nxtIsectAlongRingAndEdge2 == leftIsect\n      ) {\n        var isectBeforeLeftIsect = k;\n        break;\n      }\n    }\n    var windingAtIsect = isConvex(\n      [\n        isectList[isectBeforeLeftIsect].coord,\n        isectList[leftIsect].coord,\n        isectList[isectAfterLeftIsect].coord,\n      ],\n      true\n    )\n      ? 1\n      : -1;\n\n    queue.push({ isect: leftIsect, parent: -1, winding: windingAtIsect });\n  }\n  // Sort the queue by the same criterion used to find the leftIsect: the left-most leftIsect must be last in the queue, such that it will be popped first, such that we will work from out to in regarding input rings. This assumtion is used when predicting the winding number and parent of a new queue member.\n  queue.sort(function (a, b) {\n    return isectList[a.isect].coord > isectList[b.isect].coord ? -1 : 1;\n  });\n\n  // Initialise output\n  var outputFeatureArray = [];\n\n  // While the queue is not empty, take the last object (i.e. its intersection) out and start making an output ring by walking in the direction that has not been walked away over yet.\n  while (queue.length > 0) {\n    // Get the last object out of the queue\n    var popped = queue.pop();\n    var startIsect = popped.isect;\n    var currentOutputRingParent = popped.parent;\n    var currentOutputRingWinding = popped.winding;\n    // Make new output ring and add vertex from starting intersection\n    var currentOutputRing = outputFeatureArray.length;\n    var currentOutputRingCoords = [isectList[startIsect].coord];\n    // Set up the variables used while walking over intersections: 'currentIsect', 'nxtIsect' and 'walkingRingAndEdge'\n    var currentIsect = startIsect;\n    if (isectList[startIsect].ringAndEdge1Walkable) {\n      var walkingRingAndEdge = isectList[startIsect].ringAndEdge1;\n      var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge1;\n    } else {\n      var walkingRingAndEdge = isectList[startIsect].ringAndEdge2;\n      var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge2;\n    }\n    // While we have not arrived back at the same intersection, keep walking\n    while (\n      !equalArrays$1(isectList[startIsect].coord, isectList[nxtIsect].coord)\n    ) {\n      currentOutputRingCoords.push(isectList[nxtIsect].coord);\n      // If the next intersection is queued, we can remove it, because we will go there now.\n      var nxtIsectInQueue = undefined;\n      for (var i = 0; i < queue.length; i++) {\n        if (queue[i].isect == nxtIsect) {\n          nxtIsectInQueue = i;\n          break;\n        }\n      }\n      if (nxtIsectInQueue != undefined) {\n        queue.splice(nxtIsectInQueue, 1);\n      }\n      // Arriving at this new intersection, we know which will be our next walking ring and edge (if we came from 1 we will walk away from 2 and vice versa),\n      // So we can set it as our new walking ring and intersection and remember that we (will) have walked over it\n      // If we have never walked away from this new intersection along the other ring and edge then we will soon do, add the intersection (and the parent wand winding number) to the queue\n      // (We can predict the winding number and parent as follows: if the edge is convex, the other output ring started from there will have the alternate winding and lie outside of the current one, and thus have the same parent ring as the current ring. Otherwise, it will have the same winding number and lie inside of the current ring. We are, however, only sure of this of an output ring started from there does not enclose the current ring. This is why the initial queue's intersections must be sorted such that outer ones come out first.)\n      // We then update the other two walking variables.\n      if (equalArrays$1(walkingRingAndEdge, isectList[nxtIsect].ringAndEdge1)) {\n        walkingRingAndEdge = isectList[nxtIsect].ringAndEdge2;\n        isectList[nxtIsect].ringAndEdge2Walkable = false;\n        if (isectList[nxtIsect].ringAndEdge1Walkable) {\n          var pushing = { isect: nxtIsect };\n          if (\n            isConvex(\n              [\n                isectList[currentIsect].coord,\n                isectList[nxtIsect].coord,\n                isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge2].coord,\n              ],\n              currentOutputRingWinding == 1\n            )\n          ) {\n            pushing.parent = currentOutputRingParent;\n            pushing.winding = -currentOutputRingWinding;\n          } else {\n            pushing.parent = currentOutputRing;\n            pushing.winding = currentOutputRingWinding;\n          }\n          queue.push(pushing);\n        }\n        currentIsect = nxtIsect;\n        nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge2;\n      } else {\n        walkingRingAndEdge = isectList[nxtIsect].ringAndEdge1;\n        isectList[nxtIsect].ringAndEdge1Walkable = false;\n        if (isectList[nxtIsect].ringAndEdge2Walkable) {\n          var pushing = { isect: nxtIsect };\n          if (\n            isConvex(\n              [\n                isectList[currentIsect].coord,\n                isectList[nxtIsect].coord,\n                isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge1].coord,\n              ],\n              currentOutputRingWinding == 1\n            )\n          ) {\n            pushing.parent = currentOutputRingParent;\n            pushing.winding = -currentOutputRingWinding;\n          } else {\n            pushing.parent = currentOutputRing;\n            pushing.winding = currentOutputRingWinding;\n          }\n          queue.push(pushing);\n        }\n        currentIsect = nxtIsect;\n        nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge1;\n      }\n    }\n    // Close output ring\n    currentOutputRingCoords.push(isectList[nxtIsect].coord);\n    // Push output ring to output\n    outputFeatureArray.push(\n      helpers.polygon([currentOutputRingCoords], {\n        index: currentOutputRing,\n        parent: currentOutputRingParent,\n        winding: currentOutputRingWinding,\n        netWinding: undefined,\n      })\n    );\n  }\n\n  var output = helpers.featureCollection(outputFeatureArray);\n\n  determineParents();\n\n  setNetWinding();\n\n  // These functions are also used if no intersections are found\n  function determineParents() {\n    var featuresWithoutParent = [];\n    for (var i = 0; i < output.features.length; i++) {\n      if (output.features[i].properties.parent == -1)\n        featuresWithoutParent.push(i);\n    }\n    if (featuresWithoutParent.length > 1) {\n      for (var i = 0; i < featuresWithoutParent.length; i++) {\n        var parent = -1;\n        var parentArea = Infinity;\n        for (var j = 0; j < output.features.length; j++) {\n          if (featuresWithoutParent[i] == j) continue;\n          if (\n            booleanPointInPolygon__default['default'](\n              output.features[featuresWithoutParent[i]].geometry\n                .coordinates[0][0],\n              output.features[j],\n              { ignoreBoundary: true }\n            )\n          ) {\n            if (area__default['default'](output.features[j]) < parentArea) {\n              parent = j;\n            }\n          }\n        }\n        output.features[featuresWithoutParent[i]].properties.parent = parent;\n      }\n    }\n  }\n\n  function setNetWinding() {\n    for (var i = 0; i < output.features.length; i++) {\n      if (output.features[i].properties.parent == -1) {\n        var netWinding = output.features[i].properties.winding;\n        output.features[i].properties.netWinding = netWinding;\n        setNetWindingOfChildren(i, netWinding);\n      }\n    }\n  }\n\n  function setNetWindingOfChildren(parent, ParentNetWinding) {\n    for (var i = 0; i < output.features.length; i++) {\n      if (output.features[i].properties.parent == parent) {\n        var netWinding =\n          ParentNetWinding + output.features[i].properties.winding;\n        output.features[i].properties.netWinding = netWinding;\n        setNetWindingOfChildren(i, netWinding);\n      }\n    }\n  }\n\n  return output;\n}\n\n// Constructor for (ring- or intersection-) pseudo-vertices.\nvar PseudoVtx = function (\n  coord,\n  param,\n  ringAndEdgeIn,\n  ringAndEdgeOut,\n  nxtIsectAlongEdgeIn\n) {\n  this.coord = coord; // [x,y] of this pseudo-vertex\n  this.param = param; // fractional distance of this intersection on incomming edge\n  this.ringAndEdgeIn = ringAndEdgeIn; // [ring index, edge index] of incomming edge\n  this.ringAndEdgeOut = ringAndEdgeOut; // [ring index, edge index] of outgoing edge\n  this.nxtIsectAlongEdgeIn = nxtIsectAlongEdgeIn; // The next intersection when following the incomming edge (so not when following ringAndEdgeOut!)\n};\n\n// Constructor for an intersection. There are two intersection-pseudo-vertices per self-intersection and one ring-pseudo-vertex per ring-vertex-intersection. Their labels 1 and 2 are not assigned a particular meaning but are permanent once given.\nvar Isect = function (\n  coord,\n  ringAndEdge1,\n  ringAndEdge2,\n  nxtIsectAlongRingAndEdge1,\n  nxtIsectAlongRingAndEdge2,\n  ringAndEdge1Walkable,\n  ringAndEdge2Walkable\n) {\n  this.coord = coord; // [x,y] of this intersection\n  this.ringAndEdge1 = ringAndEdge1; // first edge of this intersection\n  this.ringAndEdge2 = ringAndEdge2; // second edge of this intersection\n  this.nxtIsectAlongRingAndEdge1 = nxtIsectAlongRingAndEdge1; // the next intersection when following ringAndEdge1\n  this.nxtIsectAlongRingAndEdge2 = nxtIsectAlongRingAndEdge2; // the next intersection when following ringAndEdge2\n  this.ringAndEdge1Walkable = ringAndEdge1Walkable; // May we (still) walk away from this intersection over ringAndEdge1?\n  this.ringAndEdge2Walkable = ringAndEdge2Walkable; // May we (still) walk away from this intersection over ringAndEdge2?\n};\n\n// Function to determine if three consecutive points of a simple, non-self-intersecting ring make up a convex vertex, assuming the ring is right- or lefthanded\nfunction isConvex(pts, righthanded) {\n  // 'pts' is an [x,y] pair\n  // 'righthanded' is a boolean\n  if (typeof righthanded === \"undefined\") righthanded = true;\n  if (pts.length != 3)\n    throw new Error(\"This function requires an array of three points [x,y]\");\n  var d =\n    (pts[1][0] - pts[0][0]) * (pts[2][1] - pts[0][1]) -\n    (pts[1][1] - pts[0][1]) * (pts[2][0] - pts[0][0]);\n  return d >= 0 == righthanded;\n}\n\n// Function to compute winding of simple, non-self-intersecting ring\nfunction windingOfRing(ring) {\n  // 'ring' is an array of [x,y] pairs with the last equal to the first\n  // Compute the winding number based on the vertex with the smallest x-value, it precessor and successor. An extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it is not is because the winding number we use to compute it is wrong\n  var leftVtx = 0;\n  for (var i = 0; i < ring.length - 1; i++) {\n    if (ring[i][0] < ring[leftVtx][0]) leftVtx = i;\n  }\n  if (\n    isConvex(\n      [\n        ring[modulo(leftVtx - 1, ring.length - 1)],\n        ring[leftVtx],\n        ring[modulo(leftVtx + 1, ring.length - 1)],\n      ],\n      true\n    )\n  ) {\n    var winding = 1;\n  } else {\n    var winding = -1;\n  }\n  return winding;\n}\n\n// Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript\nfunction equalArrays$1(array1, array2) {\n  // if the other array is a falsy value, return\n  if (!array1 || !array2) return false;\n\n  // compare lengths - can save a lot of time\n  if (array1.length != array2.length) return false;\n\n  for (var i = 0, l = array1.length; i < l; i++) {\n    // Check if we have nested arrays\n    if (array1[i] instanceof Array && array2[i] instanceof Array) {\n      // recurse into the nested arrays\n      if (!equalArrays$1(array1[i], array2[i])) return false;\n    } else if (array1[i] != array2[i]) {\n      // Warning - two different object instances will never be equal: {x:20} != {x:20}\n      return false;\n    }\n  }\n  return true;\n}\n\n// Fix Javascript modulo for negative number. From http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving\nfunction modulo(n, m) {\n  return ((n % m) + m) % m;\n}\n\n// Function to check if array is unique (i.e. all unique elements, i.e. no duplicate elements)\nfunction isUnique(array) {\n  var u = {};\n  var isUnique = 1;\n  for (var i = 0, l = array.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(u, array[i])) {\n      isUnique = 0;\n      break;\n    }\n    u[array[i]] = 1;\n  }\n  return isUnique;\n}\n\n/**\n * Takes a kinked polygon and returns a feature collection of polygons that have no kinks.\n * Uses [simplepolygon](https://github.com/mclaeysb/simplepolygon) internally.\n *\n * @name unkinkPolygon\n * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} geojson GeoJSON Polygon or MultiPolygon\n * @returns {FeatureCollection<Polygon>} Unkinked polygons\n * @example\n * var poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);\n *\n * var result = turf.unkinkPolygon(poly);\n *\n * //addToMap\n * var addToMap = [poly, result]\n */\nfunction unkinkPolygon(geojson) {\n  var features = [];\n  meta.flattenEach(geojson, function (feature) {\n    if (feature.geometry.type !== \"Polygon\") return;\n    meta.featureEach(simplepolygon(feature), function (poly) {\n      features.push(helpers.polygon(poly.geometry.coordinates, feature.properties));\n    });\n  });\n  return helpers.featureCollection(features);\n}\n\nmodule.exports = unkinkPolygon;\nmodule.exports.default = unkinkPolygon;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = require(\"@turf/invariant\");\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = invariant_1.getCoord(point);\n    var geom = invariant_1.getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\nexports.default = booleanPointInPolygon;\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nexports.getCoord = getCoord;\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\nexports.getCoords = getCoords;\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        helpers_1.isNumber(coordinates[0]) &&\n        helpers_1.isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\nexports.containsNumber = containsNumber;\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\nexports.geojsonType = geojsonType;\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\nexports.featureOf = featureOf;\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\nexports.collectionOf = collectionOf;\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\nexports.getGeom = getGeom;\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\nexports.getType = getType;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.quickselect = factory());\n}(this, (function () { 'use strict';\n\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nreturn quickselect;\n\n})));\n","'use strict';\n\nmodule.exports = rbush;\nmodule.exports.default = rbush;\n\nvar quickselect = require('quickselect');\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(237);\n"],"names":["root","factory","exports","module","define","amd","self","randomPoints","random","turf","number","options","points","params","unkink","features","input","fc","unkinkPolygon","ori","randomFeatures","bbox","n","flag","joker","thePoints","randomPoint","ptsWithin","pointsWithinPolygon","i","length","push","Error","featureCollection","randomPointsFromGeoJSON","count","helpers","default","Object","defineProperty","value","meta_1","RADIUS","polygonArea","coords","total","Math","abs","ringArea","p1","p2","lowerIndex","middleIndex","upperIndex","coordsLength","rad","sin","num","PI","geojson","geomReduce","geom","type","coordinates","calculateArea","feature","properties","feat","id","geometry","point","Array","isArray","isNumber","polygon","_i","coordinates_1","ring","j","lineString","multiLineString","multiPoint","multiPolygon","radiansToLength","radians","units","factor","factors","lengthToRadians","distance","radiansToDegrees","isNaN","earthRadius","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","yards","unitsFactors","areaFactors","acres","hectares","_options","map","polygons","lineStrings","geometryCollection","geometries","round","precision","multiplier","pow","lengthToDegrees","bearingToAzimuth","bearing","angle","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","isObject","constructor","validateBBox","forEach","validateId","indexOf","coordEach","callback","excludeWrapCoord","k","l","stopG","geometryMaybeCollection","isGeometryCollection","wrapShrink","coordIndex","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","propEach","featureEach","geomEach","g","featureProperties","featureBBox","featureId","undefined","flattenEach","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","currentCoord","featureIndexCoord","multiPartIndexCoord","currentSegment","lineEach","coordAll","coord","coordReduce","initialValue","previousValue","featureReduce","currentFeature","findPoint","findSegment","flattenReduce","currentGeometry","lineReduce","currentLine","propReduce","currentProperties","segmentReduce","started","result","Infinity","pointInPolygon","meta","_interopDefaultLegacy","e","pointInPolygon__default","results","contained","pointsWithin","pointCoord","invariant_1","inRing","pt","ignoreBoundary","isInside","slice","xi","yi","xj","yj","getCoord","getGeom","polys","inBBox","insidePoly","inHole","helpers_1","getCoords","containsNumber","geojsonType","name","featureOf","collectionOf","_a","getType","_name","__spreadArrays","this","s","il","arguments","r","a","jl","randomPosition","coordInBBox","rnd","randomPolygon","num_vertices","max_radial_length","_loop_1","hub","vertices","circleOffsets","cur","index","arr","radialScaler","cos","randomLineString","max_length","max_rotation","tan","rbush","booleanPointInPolygon","rbush__default","area__default","booleanPointInPolygon__default","equalArrays","array1","array2","simplepolygon","numRings","equalArrays$1","apply","array","u","isUnique","prototype","hasOwnProperty","call","numvertices","selfIsectsData","filterFn","useSpatialIndex","output","seen","allEdgesAsRbushTreeItems","ring0","edge0","rbushTreeItem","tree","load","ringA","edgeA","search","bboxIsect","ring1","edge1","edge","ifIsectAddToOutput","frac0","frac1","start0","end0","start1","end1","isect","x0","y0","x1","y1","x2","y2","x3","y3","denom","intersect","key","unique","minX","maxX","minY","maxY","start","end","isects","numSelfIsect","outputFeatureArray","parent","winding","windingOfRing","determineParents","setNetWinding","pseudoVtxListByRingAndEdge","isectList","PseudoVtx","modulo","Isect","numIsect","sort","b","param","allIsectsAsIsectRbushTreeItem","isectRbushTree","coordToFind","IsectRbushTreeItemFound","nxtIsectAlongEdgeIn","nxtIsectAlongRingAndEdge2","ringAndEdge1","ringAndEdgeIn","nxtIsectAlongRingAndEdge1","queue","leftIsect","isectAfterLeftIsect","isectBeforeLeftIsect","windingAtIsect","isConvex","popped","pop","startIsect","currentOutputRingParent","currentOutputRingWinding","currentOutputRing","currentOutputRingCoords","currentIsect","ringAndEdge1Walkable","walkingRingAndEdge","nxtIsect","ringAndEdge2","nxtIsectInQueue","splice","ringAndEdge2Walkable","pushing","netWinding","featuresWithoutParent","setNetWindingOfChildren","ParentNetWinding","ringAndEdgeOut","pts","righthanded","leftVtx","m","poly","quickselectStep","left","right","compare","z","log","exp","sd","sqrt","max","floor","min","t","swap","tmp","defaultCompare","quickselect","maxEntries","format","_maxEntries","_minEntries","ceil","_initFormat","clear","findItem","item","items","equalsFn","calcBBox","node","toBBox","distBBox","children","p","destNode","createNode","child","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","contains","intersects","height","multiSelect","mid","stack","all","_all","data","len","childBBox","nodesToSearch","collides","insert","_build","_splitRoot","tmpNode","_insert","remove","goingUp","path","indexes","_condense","compareMinX","compareMinY","toJSON","fromJSON","N","M","right2","right3","N2","N1","_chooseSubtree","level","targetNode","enlargement","minArea","minEnlargement","isNode","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","bbox1","bbox2","overlap","minOverlap","_allDistMargin","leftBBox","rightBBox","margin","siblings","compareArr","Function","join","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}
{"version":3,"file":"random-points.js","sources":["webpack://random-points-generator/./src/random-points.ts"],"sourcesContent":["import turf from './turf';\n\nconst DEFAULT_NUMBER = 10;\n\nconst randomPoints = (n: number, bbox?: GeoJSON.BBox) => {\n  const count = n || DEFAULT_NUMBER;\n  return turf.randomPoint(count, {\n    bbox,\n  });\n};\n\nconst randomPointsFromGeoJSON = (\n  input: number,\n  { features, unkink }: { features: GeoJSON.FeatureCollection; unkink: boolean }\n) => {\n  let fc;\n  if (unkink) {\n    // @ts-expect-error TODO: fix this\n    fc = turf.unkinkPolygon(features);\n  } else {\n    fc = features;\n  }\n\n  const ori = input || DEFAULT_NUMBER;\n  const randomFeatures: GeoJSON.Feature<\n    GeoJSON.Point,\n    GeoJSON.GeoJsonProperties\n  >[] = [];\n  const bbox = turf.bbox(fc);\n  let n = ori;\n  let flag = false;\n  let joker = 0;\n\n  while (!flag) {\n    const thePoints = turf.randomPoint(n, {\n      bbox,\n    });\n    joker += 1;\n    // @ts-expect-error TODO: fix this\n    const ptsWithin = turf.pointsWithinPolygon(thePoints, fc);\n    for (let i = 0; i < ptsWithin.features.length; i += 1) {\n      const feature = ptsWithin.features[i];\n      if (feature !== undefined && feature.geometry.type === 'Point') {\n        randomFeatures.push(\n          feature as GeoJSON.Feature<GeoJSON.Point, GeoJSON.GeoJsonProperties>\n        );\n      }\n    }\n    if (randomFeatures.length < ori) {\n      n = ori - randomFeatures.length;\n    } else {\n      flag = true;\n    }\n    if (joker > ori * 10000) {\n      throw new Error(\n        'Your are not lucky. Ending without reaching expected number of Points with input polygon(s)'\n      );\n    }\n  }\n  return turf.featureCollection(randomFeatures);\n};\n\n/**\n * Creates random points and returns it as a FeatureCollection\n * @param  {Number} number of points to generate\n * @param  {Object} options for random [bbox|input]\n * @return FeatureCollection generated random points\n */\nexport function random(\n  n: number,\n  options: {\n    bbox?: GeoJSON.BBox;\n    features?: GeoJSON.FeatureCollection;\n    unkink?: boolean;\n  }\n): GeoJSON.FeatureCollection {\n  let points;\n  let params = { ...options };\n  if (typeof params === 'undefined') {\n    params = { unkink: true };\n  }\n  if (typeof params.unkink === 'undefined') {\n    params.unkink = true;\n  }\n\n  // console.debug('params', params);\n  if (typeof params.features !== 'undefined') {\n    points = randomPointsFromGeoJSON(n, {\n      features: params.features,\n      unkink: params.unkink,\n    });\n  } else {\n    points = randomPoints(n, params.bbox);\n  }\n\n  return points as GeoJSON.FeatureCollection<\n    GeoJSON.Geometry,\n    GeoJSON.GeoJsonProperties\n  >;\n}\n\nexport const RandomGenerator = {\n  random,\n};\n\nexport default { random };\n"],"names":["DEFAULT_NUMBER","randomPoints","n","bbox","count","turf","randomPointsFromGeoJSON","input","features","unkink","fc","ori","randomFeatures","flag","joker","thePoints","ptsWithin","i","feature","undefined","Error","random","options","points","params","RandomGenerator"],"mappings":";AAEA,MAAMA,iBAAiB;AAEvB,MAAMC,eAAe,CAACC,GAAWC;IAC/B,MAAMC,QAAQF,KAAKF;IACnB,OAAOK,KAAK,WAAW,CAACD,OAAO;QAC7BD;IACF;AACF;AAEA,MAAMG,0BAA0B,CAC9BC,OACA,EAAEC,QAAQ,EAAEC,MAAM,EAA4D;IAE9E,IAAIC;IAGFA,KAFED,SAEGJ,KAAK,aAAa,CAACG,YAEnBA;IAGP,MAAMG,MAAMJ,SAASP;IACrB,MAAMY,iBAGA,EAAE;IACR,MAAMT,OAAOE,KAAK,IAAI,CAACK;IACvB,IAAIR,IAAIS;IACR,IAAIE,OAAO;IACX,IAAIC,QAAQ;IAEZ,MAAO,CAACD,KAAM;QACZ,MAAME,YAAYV,KAAK,WAAW,CAACH,GAAG;YACpCC;QACF;QACAW,SAAS;QAET,MAAME,YAAYX,KAAK,mBAAmB,CAACU,WAAWL;QACtD,IAAK,IAAIO,IAAI,GAAGA,IAAID,UAAU,QAAQ,CAAC,MAAM,EAAEC,KAAK,EAAG;YACrD,MAAMC,UAAUF,UAAU,QAAQ,CAACC,EAAE;YACrC,IAAIC,AAAYC,WAAZD,WAAyBA,AAA0B,YAA1BA,QAAQ,QAAQ,CAAC,IAAI,EAChDN,eAAe,IAAI,CACjBM;QAGN;QACA,IAAIN,eAAe,MAAM,GAAGD,KAC1BT,IAAIS,MAAMC,eAAe,MAAM;aAE/BC,OAAO;QAET,IAAIC,QAAQH,AAAM,QAANA,KACV,MAAM,IAAIS,MACR;IAGN;IACA,OAAOf,KAAK,iBAAiB,CAACO;AAChC;AAQO,SAASS,OACdnB,CAAS,EACToB,OAIC;IAED,IAAIC;IACJ,IAAIC,SAAS;QAAE,GAAGF,OAAO;IAAC;IAC1B,IAAI,AAAkB,WAAXE,QACTA,SAAS;QAAE,QAAQ;IAAK;IAE1B,IAAI,AAAyB,WAAlBA,OAAO,MAAM,EACtBA,OAAO,MAAM,GAAG;IAKhBD,SADE,AAA2B,WAApBC,OAAO,QAAQ,GACflB,wBAAwBJ,GAAG;QAClC,UAAUsB,OAAO,QAAQ;QACzB,QAAQA,OAAO,MAAM;IACvB,KAESvB,aAAaC,GAAGsB,OAAO,IAAI;IAGtC,OAAOD;AAIT;AAEO,MAAME,kBAAkB;IAC7BJ;AACF;AAEA,sBAAe;IAAEA;AAAO"}